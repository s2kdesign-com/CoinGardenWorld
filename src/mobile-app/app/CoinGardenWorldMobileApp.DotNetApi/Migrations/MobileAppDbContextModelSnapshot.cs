// <auto-generated />
using System;
using CoinGardenWorldMobileApp.DotNetApi.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoinGardenWorldMobileApp.DotNetApi.Migrations
{
    [DbContext(typeof(MobileAppDbContext))]
    partial class MobileAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProfileIntroduction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("ProfilePicure")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("UpdatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedFrom");

                    b.HasIndex("UpdatedFrom");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.FlowerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GardenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UpdatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedFrom");

                    b.HasIndex("GardenId");

                    b.HasIndex("UpdatedFrom");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.GardenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UpdatedFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedFrom");

                    b.HasIndex("UpdatedFrom");

                    b.ToTable("Gardens");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", b =>
                {
                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "CreatedFromAccount")
                        .WithMany()
                        .HasForeignKey("CreatedFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "UpdatedFromAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedFrom")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedFromAccount");

                    b.Navigation("UpdatedFromAccount");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.FlowerEntity", b =>
                {
                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "CreatedFromAccount")
                        .WithMany()
                        .HasForeignKey("CreatedFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.GardenEntity", "Garden")
                        .WithMany("Flowers")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "UpdatedFromAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedFrom")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedFromAccount");

                    b.Navigation("Garden");

                    b.Navigation("UpdatedFromAccount");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.GardenEntity", b =>
                {
                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "Account")
                        .WithMany("Gardens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "CreatedFromAccount")
                        .WithMany()
                        .HasForeignKey("CreatedFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", "UpdatedFromAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedFrom")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("CreatedFromAccount");

                    b.Navigation("UpdatedFromAccount");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.AccountEntity", b =>
                {
                    b.Navigation("Gardens");
                });

            modelBuilder.Entity("CoinGardenWorldMobileApp.DotNetApi.Entities.GardenEntity", b =>
                {
                    b.Navigation("Flowers");
                });
#pragma warning restore 612, 618
        }
    }
}
