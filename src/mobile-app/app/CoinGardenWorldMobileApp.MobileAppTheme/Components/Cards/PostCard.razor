

@inject MobileApiHttpClient mobileApiHttpClient

@inject ILogger<PostCard> Logger

@inject ToastService toastService

@inject IHybridStorage localStorage

<div class="card card-style">

    <div class="d-flex px-2 pb-2 pt-2">
        <div>
            <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/pictures/7s.jpg" width="45" class="rounded-s" alt="img"></a>
        </div>
        <div class="ps-2 align-self-center">
            <h5 class="ps-1 mb-0 line-height-xs pt-1">
                @Post.Account.DisplayName
            </h5>

            <h6 class="ps-1 mb-0 font-400 opacity-40">
                @String.Join(',', Post.Account.Badges.Select(b => b.BadgeName))
            </h6>
        </div>
        <div class="ms-auto">
            <a href="#" data-bs-toggle="dropdown" class="icon icon-m ps-3" aria-expanded="false"><i class="bi bi-three-dots-vertical font-18 color-theme"></i></a>
            <div class="dropdown-menu bg-transparent border-0 mt-n1 ms-3" style="margin: 0px;">
                <div class="card card-style rounded-m shadow-xl mt-1 me-1">
                    <div class="list-group list-custom list-group-s list-group-flush rounded-xs px-3 py-1">
                        <div class="menu-list">

                            @if (_accountId.HasValue && Post.AccountId == _accountId)
                            {
                                

                            <a href="/posts/edit/@Post.Id" class="nav-link color-theme opacity-70 list-group-item py-1" data-bs-dismiss="menu-main">

                                <strong class="font-500 font-12">
                                    Edit Post

                                </strong><i class="bi bi-chevron-right"></i>
                            </a>
                            <a @onclick="DeletePost" class="nav-link color-theme opacity-70 list-group-item py-1" data-bs-dismiss="menu-main">

                                <strong class="font-500 font-12">
                                    Delete post

                                </strong><i class="bi bi-chevron-right"></i>
                                </a>
                            }else{
                                
                                <a class="nav-link color-theme opacity-70 list-group-item py-1" data-bs-dismiss="menu-main">

                                    <strong class="font-500 font-12">
                                        Report post

                                    </strong><i class="bi bi-chevron-right"></i>
                                </a>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @if (Post.PostType == Models.Entities.Enums.PostType.Link)
    {

        <div class="responsive-iframe ">
            <iframe class="" src="@Post.ExternalUrl" frameborder="0" allowfullscreen="" name=""></iframe>
        </div>

    }
    else if (Post.PostType == Models.Entities.Enums.PostType.Picture)
    {
        <img src="@Post.Images[0].ImageUrl" class="img-fluid">
    }
    else if (Post.PostType == Models.Entities.Enums.PostType.Album)
    {
        @foreach (var postImage in Post.Images)
        {

            <img src="@postImage.ImageUrl" class="img-fluid">
        }
    }
    <div class="content">


        @if (Post.PostType == Models.Entities.Enums.PostType.Text)
        {

            <h3 class="font-19 font-800">@Post.Content</h3>

            @*     <h3 class="font-17 font-800">Went shopping today at <strong class="color-highlight">Apple</strong>. Got the latest <strong class="color-highlight">#MacbookPro</strong>. It's absolutely awesome.</h3> *@
        }


        @if (Post.PostType != Models.Entities.Enums.PostType.Text)
        {
            if (!String.IsNullOrEmpty(Post.Title))
            {

                <h3 class="font-19 font-800">
                    @Post.Title
                </h3>
            }
            if (!String.IsNullOrEmpty(Post.Content))
            {

                <p class="mt-0 mb-3">
                    @Post.Content
                </p>
            }
        }




        <div class="divider mb-3 mt-3"></div>
        <div class="d-flex">
            <div class="me-auto">
                <a class="color-theme opacity-50">
                    <i class="bi bi-hand-thumbs-up-fill pe-2 font-11"></i>
                    Like
                    <span class="badge gradient-highlight color-theme ms-2" style="border-radius: 0.25rem;">4256</span>
                </a>
            </div>
            <div>
                <a class="color-theme opacity-50" data-bs-toggle="collapse" href="#comments-post-@Post.Id" aria-controls="comments-post-@Post.Id">
                    <i class="bi bi-chat-fill font-11 pe-2"></i>
                    Comments
                    <span class="badge gradient-highlight color-theme ms-2" style="border-radius: 0.25rem;">1821</span>
                </a>
            </div>
            <div class="ms-auto">
                <a href="#" class="color-theme opacity-50">
                    <i class="bi bi-share-fill font-10 pe-3"></i>
                    Share
                </a>
            </div>
        </div>


        <div class="collapse" id="comments-post-@Post.Id">
            <div class="divider mt-3"></div>
            <div class="mb-4">
                <div class="d-flex">
                    <div>
                        <img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/pictures/1s.jpg" width="40" class="rounded-m me-2">
                    </div>
                    <div>
                        <h6 class="font-12 mb-n1">Jack Son</h6>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <strong class="color-theme opacity-30 ps-2">5.0</strong>
                    </div>
                    <div class="ms-auto align-self-end">
                        <strong class="color-theme font-10">1 day ago</strong>
                    </div>
                </div>
                <p class="line-height-m pt-2">
                    Probably the best item I've ever worked with. The customer support is outstanding
                    and there are so many options! Highlight recommended.
                </p>
            </div>
            <div>
                <div class="d-flex">
                    <div>
                        <img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/pictures/2s.jpg" width="40" class="rounded-m me-2">
                    </div>
                    <div>
                        <h6 class="font-12 mb-n1">Diane Doeson</h6>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <i class="bi bi-star-fill color-yellow-dark"></i>
                        <strong class="color-theme opacity-30 ps-2">4.5</strong>
                    </div>
                    <div class="ms-auto align-self-end">
                        <strong class="color-theme font-10">1 day ago</strong>
                    </div>
                </div>
                <p class="line-height-m pt-2">
                    Loved every part of it. However, I had a problem while downloading
                    which really annoyed me. Everything else was perfect.
                </p>
            </div>
        </div>



    </div>
</div>


@code {
    // TODO: Check if Youtube or embed or picture
    [Parameter]
    public Models.Entities.Post Post { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteCallback { get; set; }

    private Guid? _accountId;
    protected override Task OnInitializedAsync()
    {
        var accountIdString = localStorage.Get<string>(Constants.USER_ACCOUNT_ID_LOCAL_STORAGE_NAME);
        if (!string.IsNullOrEmpty(accountIdString))
        {
            
            _accountId = Guid.Parse(accountIdString);
        }

        return base.OnInitializedAsync();
    }

    public async Task DeletePost()
    {
        Console.WriteLine("Delete post " + Post.Id);
        try
        {
            
            await mobileApiHttpClient.MobileApiAuthorized.PostsDELETEAsync(Post.Id);

            toastService.ShowToast("Post is Deleted!", ToastLevel.Success);
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);

            toastService.ShowToast("Error when uploading post!", ToastLevel.Error);
        }

        await OnDeleteCallback.InvokeAsync(Post.Id);
    }
}
