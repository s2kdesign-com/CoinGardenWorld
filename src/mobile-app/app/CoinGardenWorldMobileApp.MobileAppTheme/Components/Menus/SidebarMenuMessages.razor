
@inherits SignalRComponent

<span class="menu-divider mt-4">Messages</span>
<div class="menu-content px-3">
    <div class="card card-style rounded-m p-2 mx-0 bg-theme mb-0">

        @if (HubConnected)
        {

            <div class="menu-list">
                <a href="@NavigationLinks.CHAT_MESSAGES_URL"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/6s.png" alt="img" class="gradient-orange"><span class="font-500 color-theme">Olivia Orange</span><em class="badge badge-s bg-red-dark">3</em></a>
                <a href="@NavigationLinks.CHAT_MESSAGES_URL"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/2s.png" alt="img" class="gradient-green"><span class="font-500 color-theme">Marcus Green</span><em class="badge badge-s bg-red-dark">5</em></a>
                <a href="@NavigationLinks.CHAT_MESSAGES_URL"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/5s.png" alt="img" class="gradient-blue"><span class="font-500 color-theme">Danny Blueish</span><em class="badge badge-s bg-red-dark">1</em></a>

                <NavLink class="nav-link" href="@NavigationLinks.CHAT_LIST_URL" id="nav-homes">
                    <i class="gradient-highlight shadow-bg shadow-bg-xs bi bi-chat-dots"></i>
                    <span>All Messages</span>
                    <i class="bi bi-chevron-right"></i>
                </NavLink>
            </div>
        }
        else
        {
            <div>
                Chat is Offline
            </div>
            <div class="menu-list">
                <NavLink class="nav-link" href="@NavigationLinks.CHAT_LIST_URL" id="nav-homes">
                    <i class="gradient-highlight shadow-bg shadow-bg-xs bi bi-chat-dots"></i>
                    <span>All Messages</span>
                    <i class="bi bi-chevron-right"></i>
                </NavLink>
            </div>
        }

    </div>
</div>

@code {

    public override string HubUrlSuffix { get => "/chathub/"; }

    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // We need to wait for the base because the hub will be null
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            HubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {

                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                StateHasChanged();
            });
        }
    }
    private async Task Send()
    {
        if (HubConnection is not null)
        {
            await HubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }
}
