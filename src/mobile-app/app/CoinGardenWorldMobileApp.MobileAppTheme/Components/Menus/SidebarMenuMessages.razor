@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using CoinGardenWorldMobileApp.MobileAppTheme.Configurations
@using Microsoft.Extensions.Logging
@using System.Timers

@implements IAsyncDisposable


@inject IConfiguration configuration;
@inject ILogger<SidebarMenuMessages> logger;

<span class="menu-divider mt-4">Messages</span>
<div class="menu-content px-3">
    <div class="card card-style rounded-m p-2 mx-0 bg-theme mb-0">

        @if (HubConnected)
        {

            <div class="menu-list">
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/6s.png" alt="img" class="gradient-orange"><span class="font-500 color-theme">Olivia Orange</span><em class="badge badge-s bg-red-dark">3</em></a>
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/2s.png" alt="img" class="gradient-green"><span class="font-500 color-theme">Marcus Green</span><em class="badge badge-s bg-red-dark">5</em></a>
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/5s.png" alt="img" class="gradient-blue"><span class="font-500 color-theme">Danny Blueish</span><em class="badge badge-s bg-red-dark">1</em></a>
            </div>
        }
        else
        {
            <div>
                No SignalR Connection to server could be made
            </div>
        }

    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private ExternalApisSettings externalApisSettings;
    private Timer _signalRReconnectTimer = new Timer();

    private string _apiUrl = "#";
    private string _hubSuffix = "/api/chathub/";

    private bool HubConnected = false;


    private void SignalRReconnect(object source, ElapsedEventArgs e)
    {
        Console.WriteLine($"Trying to reconnect to signalr hub at URL: {externalApisSettings.ExternalApis.FirstOrDefault().Value.Api_Url + _hubSuffix}");

        try
        {

            if (!IsConnected )
            {
                hubConnection.StartAsync().Wait();
                HubConnected = true;
            }
            else
            {
                HubConnected = true;
                _signalRReconnectTimer.Stop();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        externalApisSettings = configuration.Get<ExternalApisSettings>();
        if (externalApisSettings != null && externalApisSettings.ExternalApis != null)
        {

            hubConnection = new HubConnectionBuilder()
                .WithUrl(externalApisSettings.ExternalApis.FirstOrDefault().Value.Api_Url + _hubSuffix)
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {

                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                StateHasChanged();
            });

            hubConnection.Reconnecting += ex =>
            {
                Console.WriteLine($"SignalR hub connection lost, trying to reconnect at URL: {externalApisSettings.ExternalApis.FirstOrDefault().Value.Api_Url + _hubSuffix}");

                HubConnected = false;
                StateHasChanged();
                return Task.CompletedTask;
            };
            hubConnection.Reconnected += ex =>
            {

                Console.WriteLine($"SignalR hub connection reconnected at URL: {externalApisSettings.ExternalApis.FirstOrDefault().Value.Api_Url + _hubSuffix}");
                HubConnected = true;
                StateHasChanged();
                return Task.CompletedTask;
            };
            hubConnection.Closed += ex =>
            {
                // TODO: Not working and i dont know why

                HubConnected = false;
                Console.Write($"The connection of '{hubConnection.ConnectionId}' is closed.");
                //If you expect non-null exception, you need to turn on 'EnableDetailedErrors' option during client negotiation.
                if (ex != null)
                {
                    Console.Write($" Exception: {ex}");
                }

                StateHasChanged();

                return Task.CompletedTask;

            };

            if (!IsConnected)
            {
                try
                {
                    await hubConnection.StartAsync();
                    HubConnected = true;
                }
                catch (Exception ex)
                {
                    logger.LogError(ex.Message);
                    // Tell the timer what to do when it elapses
                    _signalRReconnectTimer.Elapsed += new ElapsedEventHandler(SignalRReconnect);
                    // Set it to go off every five seconds
                    _signalRReconnectTimer.Interval = 5000;
                    // And start it
                    _signalRReconnectTimer.Enabled = true;
                }
            }



        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
