@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using CoinGardenWorldMobileApp.MobileAppTheme.Configurations
@using Microsoft.Extensions.Logging

@implements IAsyncDisposable


@inject IConfiguration configuration;
@inject ILogger<SidebarMenuMessages> logger;

<span class="menu-divider mt-4">Messages</span>
<div class="menu-content px-3">
    <div class="card card-style rounded-m p-2 mx-0 bg-theme mb-0">

        @if (IsConnected)
        {

            <div class="menu-list">
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/6s.png" alt="img" class="gradient-orange"><span class="font-500 color-theme">Olivia Orange</span><em class="badge badge-s bg-red-dark">3</em></a>
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/2s.png" alt="img" class="gradient-green"><span class="font-500 color-theme">Marcus Green</span><em class="badge badge-s bg-red-dark">5</em></a>
                <a href="#"><img src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/avatars/5s.png" alt="img" class="gradient-blue"><span class="font-500 color-theme">Danny Blueish</span><em class="badge badge-s bg-red-dark">1</em></a>
            </div>
        }
        else
        {
            <div>
                No SignalR Connection to server could be made
            </div>
        }

    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    private string _apiUrl = "#";

    protected override async Task OnInitializedAsync()
    {
        var externalApis = configuration.Get<ExternalApisSettings>();
        if (externalApis != null && externalApis.ExternalApis != null)
        {

            while (IsConnected != true)
            {
                try
                {
                    hubConnection = new HubConnectionBuilder()
                        .WithUrl(externalApis.ExternalApis.FirstOrDefault().Value.Api_Url + "/api/chathub/")
                        .WithAutomaticReconnect()
                        .Build();

                    hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
                    {

                        var encodedMsg = $"{user}: {message}";
                        messages.Add(encodedMsg);
                        StateHasChanged();
                    });


                    hubConnection.Closed += ex =>
                    {
                        // TODO: Not working and i dont know why

                        Console.Write($"The connection of '{hubConnection.ConnectionId}' is closed.");
                        //If you expect non-null exception, you need to turn on 'EnableDetailedErrors' option during client negotiation.
                        if (ex != null)
                        {
                            Console.Write($" Exception: {ex}");
                        }

                        StateHasChanged();

                        return Task.CompletedTask;

                    };
                    await hubConnection.StartAsync();
                }
                catch (Exception e)
                {
                    logger.LogError(e.Message);
                }

            }
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
