@* @page "/dashboard" *@

@attribute [Route(NavigationLinks.POSTS_URL)]
@attribute [Route(NavigationLinks.POSTS_SHOW_FIRST_URL)]

@inject ILogger<Posts> Logger

<!-- Your Page Content Goes Here-->
<div class="page-content header-clear-medium">
    @*
    <DashboardCardText></DashboardCardText>

    <DashboardCardText></DashboardCardText>

    <DashboardCardImage></DashboardCardImage>

    <DashboardCardText></DashboardCardText>

    <DashboardCardText></DashboardCardText>

    <DashboardCardImage></DashboardCardImage>
    *@

    <AuthorizeView>
        <Authorized>
            <div class="card card-style py-3">
                <div class="content px-2 text-center">
                    <h5 class="mb-n1 font-12 color-highlight font-700 text-uppercase">Time to share</h5>
                    <h2>Share what you think!</h2>
                    <p class="mb-3">

                    </p>
                    <a href="posts/new" class="default-link btn btn-full btn-m rounded-s gradient-highlight shadow-bg shadow-bg-s px-5 mb-0 mt-2">Create new Post</a>
                </div>
            </div>

        </Authorized>
        <NotAuthorized>

            <div class="card card-style">
                <div class="content px-2 text-center">
                    <h2>
                        Join our Garden Community
                    </h2>
                    <!-- TODO: On Mobile this will not work, check LoginDisplay -->
                    <a href="authentication/login" class="default-link btn btn-m rounded-s gradient-highlight shadow-bg shadow-bg-s mb-0 mt-2">
                        Login or register now!
                    </a>
                </div>
            </div>

        </NotAuthorized>
    </AuthorizeView>



    @if (_latestPosts.Any())
    {
        @foreach (var post in _latestPosts)
        {
            <PostCard Post="@post" OnDeleteCallback="PostDeleted" />

        }

    }
    else
    {

        <!-- TODO: Add some kind of preloader -->
    }


    <div class="col-12 pb-4">
        <div class="d-flex justify-content-center">
            <div class="preloader-m">
                <div class="spinner-border color-highlight" style="border-width: 3px;" role="status"></div>
            </div>
        </div>
    </div>
</div>
<!-- End of Page Content-->


<ThemeLoader></ThemeLoader>

@code {

    [Parameter]
    public Guid? Id { get; set; }

    private List<Models.Entities.Post> _latestPosts = new();

    [Inject]
    protected MobileApiODataClient? MobileApiODataClient { get; set; }


    private void PostDeleted(Guid id)
    {
        Logger.LogInformation("Deleted Post id: " + id);
        var post = _latestPosts.Find(p => p.Id == id);
        if (post != null)
            _latestPosts.Remove(post);
     //   StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        try
        {

    // var latestPosts = await MobileApiAuthorizedHttpClient.MobileApi.PostsODataAsync(null, null, null, null, 10, null);
    // _latestPosts = latestPosts.ToList();
    //  StateHasChanged();


        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {

            var result = await MobileApiODataClient.MobileApiOData.PostsOData.AddQueryOption("expand", "account").ExecuteAsync();

            _latestPosts = result.ToList();
            StateHasChanged();
        }

    }
}
