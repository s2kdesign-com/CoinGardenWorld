@using CoinGardenWorld.AzureStorageClientsExtensions
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@attribute [Route(NavigationLinks.NEW_POST_URL)]
@attribute [Route(NavigationLinks.EDIT_POST_URL)]

@inject ILogger<PostNew> Logger

@inject IBlobStorageService blobStorageService

@inject ToastService toastService

@inject IHybridStorage localStorage

@inject NavigationManager navigationManager

@inject MobileApiHttpClient mobileApiHttpClient

<!-- Your Page Content Goes Here-->
<div class="page-content header-clear-medium">

    @if(Id != null){
        
        <div class="card card-style">
            <div class="content mb-0">
                <h5 class="color-highlight font-13 mb-n1">
                    Edit your post
                </h5>
                <h1 class="font-700 pb-0">
                    What do you think today?
                </h1>
                <p class="mb-3">
                   You can remove images, add links or change the text
                </p>
            </div>
        </div>
    }
    else
    {
       
    <div class="card card-style">
        <div class="content mb-0">
            <h5 class="color-highlight font-13 mb-n1">
                Create new post
            </h5>
            <h1 class="font-700 pb-0">
                What do you think today?
            </h1>
            <p class="mb-3">
                Add picture text or link and preview of your post will be shown.
            </p>
        </div>
    </div>

    }

    <div class="card card-style">
        <div class="content">

            <div class="form-custom form-icon mb-3">

                <EditForm Model="@Post" OnSubmit="@Submit">
                    <i class="bi bi-pencil-fill font-12"></i>
                    <InputTextArea @bind-Value="Post!.Content" class="form-control rounded-xs" placeholder="Leave a comment here" id="new-post-content" style="height: 48px; font-size: 20px !important; line-height: 15px !important;" />
                    @*
                    <textarea class="form-control rounded-xs" placeholder="Leave a comment here" id="c7" style="height: 48px; font-size: 20px !important; line-height: 15px !important;"></textarea> *@

                    @* <label for="new-post-content" class="color-theme">Your Message</label> *@
                    @* <div class="valid-feedback">HTML5 does not offer Dates Field Validation!</div>
                    *@
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(Post.Content) || Files != null)
                    {
                        <button class="btn btn-full mt-3 btn-m text-uppercase font-700 rounded-s upload-file-text border-green-dark" type="submit" style="padding: 13px 20px !important; width:100%; ">
                            Submit
                        </button>
                    }
                </EditForm>
            </div>
            <div class="divider mb-0"></div>
            <div class="file-data">
                @if(Post.Images != null)
                {
                    foreach (var blobImageAdd in Post.Images)
                    {

                        <img id="@blobImageAdd.ImageId" src="@blobImageAdd.ImageUrl" class="img-fluid rounded-s" alt="img">
                    }
                    
                }

                @if (imageBrowserPreviews.Any())
                {
                    foreach (var browserImage in imageBrowserPreviews)
                    {

                        <img id="@browserImage.Key" src="@browserImage.Value" class="img-fluid rounded-s" alt="img">
                    }
                }

            @* 
                <img id="image-data" src="./_content/CoinGardenWorldMobileApp.MobileAppTheme/images/empty.png" class="img-fluid rounded-s" alt="img">
                <span class="upload-file-name d-block text-center"
                      data-text-before="<i class='bi bi-check-circle-fill color-green-dark pe-2'></i> Image:"
                      data-text-after=" is ready.">
                </span> *@

                <div>
                    <InputFile type="file" class="upload-file" accept="image/*" OnChange=@OnInputFileChange multiple />
                    <p class="btn btn-full btn-m text-uppercase font-700 rounded-s upload-file-text border-green-dark">Upload Image</p>
                </div>
            </div>
        </div>
    </div>

</div>
<!-- End of Page Content-->

<ThemeLoader></ThemeLoader>

@code {

    [Parameter]
    public Guid? Id { get; set; }

    private PostAdd Post { get; set; } = new();
    private IReadOnlyList<IBrowserFile>? Files { get; set; }

    private Dictionary<string, string> imageBrowserPreviews = new Dictionary<string, string>();

    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 10;
    private bool fileLoading;

    private List<Guid> imageIds = new List<Guid>();

    private List<string> imageBlobUrls = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Id != null)
        {
            try
            {
                var response = await mobileApiHttpClient.MobileApiAuthorized.PostsGETAsync(Id ?? Guid.Empty);
                if (response == null)
                {
                    navigationManager.NavigateTo("/NotFound");
                    return;
                }

                Post.Content = response.Content;
                Post.Images = new List<BlobImageAdd>();

                if (response.Images != null)
                    foreach (var blobImageDto in response.Images)
                    {
                        Post.Images.Add(new()
                            {
                                ImageId = blobImageDto.ImageId,
                                ImageUrl = blobImageDto.ImageUrl
                            });
                    }

            }
            catch (Exception e)
            {
                Logger.LogError(e.Message);
                navigationManager.NavigateTo("/NotFound");
            }
        }

    }

    private bool showToast = false;




    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            
            foreach (var browserFile in e.GetMultipleFiles(maxAllowedFiles))
            {
                var imageId = Guid.NewGuid();

                imageIds.Add(imageId);

                var buffers = new byte[browserFile.Size];
                await browserFile.OpenReadStream().ReadAsync(buffers);
                string imageType = browserFile.ContentType;
                string imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

                imageBrowserPreviews.Add(imageId.ToString(), imgUrl);
            }

            Files = e.GetMultipleFiles(maxAllowedFiles);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    //   public enum PostType
    // {// No links no images, just plain text may be with some hash tags 
    // Text = 0,
    // External link if any in the text
    // Link = 1,
    // Single image
    // Picture = 2,
    // Single video
    // Video = 3,
    // Album is combination of pictures and videos
    // Album = 4
    // }

    private async void Submit()
    {
        try
        {
            toastService.ShowToast("Uploading Post!", ToastLevel.Success);

            var accountId = localStorage.Get<string>(Constants.USER_ACCOUNT_ID_LOCAL_STORAGE_NAME);
            var i = 0;
            
            Post.PostType = Models.Entities.Enums.PostType.Text.ToString();

            if (Files != null)
            {
                Post.Images = new List<BlobImageAdd>();
                foreach (var file in Files)
                {

                    var blobUrl = await blobStorageService.UploadFileToBlobAsync(
                        accountId
                       , imageIds[i] + "." + file.Name.Split(".").Last()
                        , file.ContentType
                        , file.OpenReadStream(20971520));

                    imageBlobUrls.Add(blobUrl);

                    Post.Images.Add(new BlobImageAdd
                        {
                            ImageId = imageIds[i],
                            ImageUrl = blobUrl
                        });
                    Console.WriteLine(blobUrl);
                    i++;
                }
                // TODO: Check for image or video
                Post.PostType = Models.Entities.Enums.PostType.Picture.ToString();

                if (i > 1)
                    Post.PostType = Models.Entities.Enums.PostType.Album.ToString();
            }
            if (Id != null)
            {
                var postMerge = new PostMerge();
                postMerge.Content = Post.Content;
                if (Files != null)
                {
                    postMerge.Images = new List<BlobImageMerge>();

                    foreach (var image in Post.Images)
                    {
                        postMerge.Images.Add(new BlobImageMerge
                            {
                                ImageId = image.ImageId,
                                ImageUrl = image.ImageUrl
                            });
                    }
                }
                await mobileApiHttpClient.MobileApiAuthorized.PostsPUTAsync(Id??Guid.Empty, postMerge);
            }
            else
            {

                var response = await mobileApiHttpClient.MobileApiAuthorized.PostsPOSTAsync(Post);
                if(response != null)
                {
                    Id = response.Id;
                }
                else
                {
                    toastService.ShowToast("Error when uploading post!", ToastLevel.Error);
                }
            }
            navigationManager.NavigateTo(NavigationLinks.POSTS_URL + "/" + Id);
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);

            toastService.ShowToast("Error when uploading post!", ToastLevel.Error);
        }

    }
}
