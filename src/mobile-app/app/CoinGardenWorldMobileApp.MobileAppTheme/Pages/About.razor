@page "/about"
@using System.Reflection

@inject IClientHub<ChatHub> chatHub
@inject IClientHub<NotificationsHub> notificationsHub

@inject IHttpClientBase<VersionHttpClient, string> VersionHttpClient
@inject IHttpClientBase<VersionAuthorizedHttpClient, string> VersionAuthorizedHttpClient

<!-- Your Page Content Goes Here -->
<div class="page-content header-clear-medium">
    <div class="card card-style">
        <div class="content">
            <div class="d-flex">
                <div>
                    <h6 class="mb-n1 opacity-80 color-highlight">System Information</h6>
                    <h3>About the App</h3>
                </div>
            </div>
            <div class="divider mb-0 mx-3"></div>
            <div class="list-group list-custom list-group-m rounded-xs list-group-flush">
                <a href="terms-and-conditions" class="list-group-item">
                    <div>Terms &amp; Conditions</div>
                    <i class="bi bi-chevron-right"></i>
                </a>
                <a href="https://github.com/s2kdesign-com/CoinGardenWorld/releases" class="list-group-item">
                    <div>Site Version - @GetSiteVersion()</div>
                    <span class="badge rounded-xl bg-green-dark">OK</span>
                </a>
                @if (_apiIsAvailable)
                {
                    <a href="@_apiSwaggerUrl" class="list-group-item">
                        <div>API Version - @_apiVersion</div>
                        <span class="badge rounded-xl bg-green-dark">OK</span>
                    </a>
                }
                else
                {
                    <a href="@_apiSwaggerUrl" class="list-group-item">
                        <div>API Version - @_apiVersion</div>
                        <span class="badge rounded-xl bg-red-dark">ERROR</span>
                    </a>
                }
            </div>

        </div>
    </div>
    @if (_isApiAuthenticated)
    {
        <CardAlert Color="green" Icon="bi-check-circle-fill">
            <Content>
                Mobile API connection is Authorized!
                <br>
            </Content>
        </CardAlert>
    }
    else
    {

        <CardAlert Color="yellow" Icon="bi-exclamation-triangle">
            <Content>
                Mobile API connection is not Authorized!
                <br>
            </Content>
        </CardAlert>

    }

    @if (chatHub.IsHubConnected)
    {

        <CardAlert Color="green" Icon="bi-check-circle-fill">
            <Content>
                RealTime connection to ChatHub is established.
                <br>
            </Content>
        </CardAlert>

    }
    else
    {


        <CardAlert Color="yellow" Icon="bi-exclamation-triangle">
            <Content>
                RealTime connection to ChatHub cannot be established!
                <br>
            </Content>
        </CardAlert>

    }

    @if (notificationsHub.IsHubConnected)
    {

        <CardAlert Color="green" Icon="bi-check-circle-fill">
            <Content>
                RealTime connection to NotificationsHub is established.
                <br>
            </Content>
        </CardAlert>
    }
    else
    {
        <CardAlert Color="yellow" Icon="bi-exclamation-triangle">
            <Content>
                RealTime connection to NotificationsHub cannot be established!
                <br>
            </Content>
        </CardAlert>

    }

</div>
<!-- End of Page Content-->
<ThemeLoader></ThemeLoader>
@code {
    private DateTime dt = DateTime.Now;

    private string _apiVersion = "API is not available.";
    private bool _apiIsAvailable = false;
    private bool _isApiAuthenticated = false;

    private string _apiSwaggerUrl = "#";

    protected override async Task OnInitializedAsync()
    {
        chatHub.NotifyStateChanged += () =>
        {
            InvokeAsync(StateHasChanged);
        };

        notificationsHub.NotifyStateChanged += () =>
        {
            InvokeAsync(StateHasChanged);
        };
        _apiSwaggerUrl = VersionAuthorizedHttpClient.ApiUrl;
        // Test Mobile API without Authorization
        var apiVersionRequest = await VersionHttpClient.GetAsync("/api/version");
        if (apiVersionRequest.IsSuccessStatusCode)
        {
            _apiVersion = await apiVersionRequest.Content.ReadAsStringAsync();
            _apiIsAvailable = true;
        }

        // Test Mobile API with Authorization
        var authorizedResponse = await VersionAuthorizedHttpClient.GetAsync("/api/version/GetAuthorized");

        if (authorizedResponse.IsSuccessStatusCode)
        {
            _isApiAuthenticated = true;
        }
        else
        {
            _isApiAuthenticated = false;
        }
    }

    public static string GetSiteVersion()
    {
        Version version = Assembly.GetEntryAssembly()?.GetName().Version ?? new Version(1, 0, 0);
        return version.ToString();
    }
}
