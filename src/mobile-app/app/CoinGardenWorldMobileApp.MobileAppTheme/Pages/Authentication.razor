@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorApplicationInsights
@using CoinGardenWorldMobileApp.MobileAppTheme.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization

@inject IHybridStorage localStorage

<!-- Your Page Content Goes Here-->
<div class="page-content header-clear-medium">

    
    <div class="card card-style">
        <div class="content UTILITY_SPACING">
        
            <RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLogInSucceeded" OnLogOutSucceeded="OnLogOutSucceeded"  />
        </div>
    </div>

</div>
<!-- End of Page Content-->


<ThemeLoader></ThemeLoader>
@code {
    [Parameter] public string? Action { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    [Inject] private IApplicationInsights AppInsights { get; set; }

    public async Task OnLogInSucceeded()
    {
        var user = (await AuthenticationState).User;
        var preferredUsername = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        var emails = System.Text.Json.JsonSerializer.Deserialize<string[]>(user.Claims.FirstOrDefault(c => c.Type == "emails")?.Value);

        localStorage.SetString(Constants.PREFERRED_USERNAME_LOCAL_STORAGE_NAME, preferredUsername);
        localStorage.SetString(Constants.USER_EMAIL_LOCAL_STORAGE_NAME, emails.First());

        await AppInsights.SetAuthenticatedUserContext(emails.First());
    }

    public async Task OnLogOutSucceeded()
    {
        await AppInsights.ClearAuthenticatedUserContext();
    }
}
