@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorApplicationInsights
@using CoinGardenWorldMobileApp.MobileAppTheme.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization

@inject IHybridStorage localStorage

@inject MobileApiAuthorizedHttpClient MobileApiAuthorizedHttpClient

<!-- Your Page Content Goes Here-->
<div class="page-content header-clear-medium">


    <div class="card card-style">
        <div class="content UTILITY_SPACING">

            <RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLogInSucceeded" OnLogOutSucceeded="OnLogOutSucceeded" />
        </div>
    </div>

</div>
<!-- End of Page Content-->


<ThemeLoader></ThemeLoader>
@code {
    [Parameter] public string? Action { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    [Inject] private IApplicationInsights AppInsights { get; set; }

    public async Task OnLogInSucceeded()
    {
        try
        {
            var user = (await AuthenticationState).User;
            var preferredUsername = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
            var emails = System.Text.Json.JsonSerializer.Deserialize<string[]>(user.Claims.FirstOrDefault(c => c.Type == "emails")?.Value!);
            var userIdentityProvider = user.Claims.FirstOrDefault(c => c.Type == "idp")?.Value;


            localStorage.SetString(Constants.USER_USERNAME_LOCAL_STORAGE_NAME, preferredUsername!);
            localStorage.SetString(Constants.USER_EMAIL_LOCAL_STORAGE_NAME, emails?.First()!);
            localStorage.SetString(Constants.USER_IDP_LOCAL_STORAGE_NAME, userIdentityProvider!);


            var profileResponse = await MobileApiAuthorizedHttpClient.MobileApi.OnLoginAsync();
            if(profileResponse != null)
            {
                localStorage.SetString(Constants.USER_ACCOUNT_ID_LOCAL_STORAGE_NAME, profileResponse.AccountId.ToString());
            }
            // TODO: Move Applicaton Insights to layout because the current implementation is only for this page
            await AppInsights.SetAuthenticatedUserContext(emails?.First()!);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
       
    }

    public async Task OnLogOutSucceeded()
    {
        try
        {
            
            if (localStorage.Exists(Constants.USER_ACCOUNT_ID_LOCAL_STORAGE_NAME))
            {
                localStorage.Delete(Constants.USER_ACCOUNT_ID_LOCAL_STORAGE_NAME);
            }

            if (localStorage.Exists(Constants.USER_USERNAME_LOCAL_STORAGE_NAME))
            {
                localStorage.Delete(Constants.USER_USERNAME_LOCAL_STORAGE_NAME);
            }

            if (localStorage.Exists(Constants.USER_EMAIL_LOCAL_STORAGE_NAME))
            {
                localStorage.Delete(Constants.USER_EMAIL_LOCAL_STORAGE_NAME);
            }

            if (localStorage.Exists(Constants.USER_IDP_LOCAL_STORAGE_NAME))
            {
                localStorage.Delete(Constants.USER_IDP_LOCAL_STORAGE_NAME);
            }
            await AppInsights.ClearAuthenticatedUserContext();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
