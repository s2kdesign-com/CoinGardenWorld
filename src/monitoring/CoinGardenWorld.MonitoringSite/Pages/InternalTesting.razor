@page "/InternalTesting"

@attribute [Authorize]
@using CoinGardenWorld.HttpClientsExtensions.MobileApiClients
@using CoinGardenWorld.HttpClientsExtensions
@using CoinGardenWorld.HttpClientsExtensions.Infrastructure
@using CoinGardenWorld.HttpClientsExtensions.MetaverseSiteApiClients
@using CoinGardenWorld.HttpClientsExtensions.MobileApiSiteClients

@inject VersionHttpClient MobileApiVersionHttpClient
@inject VersionAuthorizedHttpClient MobileApiAuthorizedHttpClient

@inject MobileApiSiteAuthorizedAzureFunctionClient MobileApiSiteTestAuthorizedHttpClient
@inject MobileApiSiteAzureFunctionClient MobileApiSiteAzureFunctionClient


@inject MetaverseAuthorizedAzureFunctionClient MetaverseApiSiteTestAuthorizedHttpClient
@inject MetaverseAzureFunctionClient MetaverseApiSiteAzureFunctionClient


@inject BlazorServerTokenProvider TokenProvider

<PageTitle>Internal Testing</PageTitle>

@if (_isAuthenticated)
{
    
    <CardAlert Color="success" Icon="bi-check-circle-fill">
        <Heading>            
            User is Authorized!
        </Heading>
        <Content>
            <br />
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#accessToken" aria-expanded="false" aria-controls="accessToken">
               Access Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#refreshToken" aria-expanded="false" aria-controls="refreshToken">
               Refresh Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#xsrfToken" aria-expanded="false" aria-controls="xsrfToken">
               XsrfToken
           </button>
            <div class="collapse" id="accessToken">
               <div class="card card-body">
                   @TokenProvider.AccessToken
               </div>
           </div>
            <div class="collapse" id="refreshToken">
               <div class="card card-body">
                   @TokenProvider.RefreshToken
               </div>
           </div>
            <div class="collapse" id="xsrfToken">
               <div class="card card-body">
                   @TokenProvider.XsrfToken
               </div>
           </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="warning" Icon="bi-exclamation-triangle">
        <Content>
            Current User is not Authorized!
        </Content>
    </CardAlert>
    
}

 

<ExternalApiTest HttpClientToTest="MobileApiVersionHttpClient" AuthorizedHttpClientToTest="MobileApiAuthorizedHttpClient" ApiName="Mobile API" SwaggerSuffix="swagger/index.html" AuthenticationEndpoint="/api/version/GetAuthorized" VersionEndpoint="/api/version" />



<ExternalApiTest HttpClientToTest="MobileApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MobileApiSiteTestAuthorizedHttpClient" ApiName="Mobile Site API" />

<ExternalApiTest HttpClientToTest="MetaverseApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MetaverseApiSiteTestAuthorizedHttpClient" ApiName="Metaverse Site API" />
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask {get; set;}

    bool _isAuthenticated;

    private bool _mobileApiIsAvailable = false;
    private string _mobileApiSwaggerUrl = "#";
    private string _mobileApiVersion = "API is not available.";
    private bool _mobileIsApiAuthenticated = false;

    private string _mobileSiteApiSwaggerUrl = "#";
    private bool _mobileSiteApiIsAvailable = false;
    private bool _mobileSiteApiAuthenticated = false;
    private string? _mobileSiteApiResponse;

    protected override async Task OnInitializedAsync()
    {
        // User Is Authenticated
        var authState = await authenticationStateTask;
        var user = authState.User;

        _isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        _mobileApiSwaggerUrl = MobileApiVersionHttpClient.ApiUrl.Split("api")[0] + "swagger/index.html";

        // Test Mobile API without Authorization
        var apiVersionRequest = await MobileApiVersionHttpClient.GetAsync("/api/version");
        if (apiVersionRequest.IsSuccessStatusCode)
        {
            _mobileApiIsAvailable = true;
            _mobileApiVersion = await apiVersionRequest.Content.ReadAsStringAsync();
        }

        // Test Mobile API with Authorization
        var authorizedResponse = await MobileApiAuthorizedHttpClient.GetAsync("/api/version/GetAuthorized");

        if (authorizedResponse.IsSuccessStatusCode)
        {
            _mobileIsApiAuthenticated = true;
        }
        else
        {
            _mobileApiVersion =  "Status Code: " + authorizedResponse.StatusCode + await authorizedResponse.Content.ReadAsStringAsync();
            _mobileIsApiAuthenticated = false;
        }


        await TestAuthenticatedAzureFunctionApi();
    }


    private async Task TestAuthenticatedAzureFunctionApi()
    {
        // Test Azure Function API without Authorization
        _mobileSiteApiSwaggerUrl = MetaverseApiSiteAzureFunctionClient.ApiUrl.Split("api")[0] + "api/swagger/ui";

        var apiVersionRequest = await MetaverseApiSiteAzureFunctionClient.GetAsync("/api/version");
        if (apiVersionRequest.IsSuccessStatusCode)
        {
            _mobileSiteApiIsAvailable = true;
            _mobileSiteApiResponse = await apiVersionRequest.Content.ReadAsStringAsync();
        }

        // Test Azure Function API with Authorization
        var authorizedResponse = await MobileApiSiteTestAuthorizedHttpClient.GetAsync("/api/TestAuthenticatedEndpoint");

        if (authorizedResponse.IsSuccessStatusCode)
        {
            _mobileSiteApiResponse = await authorizedResponse.Content.ReadAsStringAsync();
            _mobileSiteApiAuthenticated = true;
        }
        else
        {
            _mobileSiteApiResponse = "Status Code: " + authorizedResponse.StatusCode + " " +  await authorizedResponse.Content.ReadAsStringAsync();
            _mobileSiteApiAuthenticated = false;
        }
    }
}
