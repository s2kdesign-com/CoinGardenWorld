@page "/InternalTesting"

@attribute [Authorize]

@using CoinGardenWorld.HttpClientsExtensions.MobileApiClients
@using CoinGardenWorld.HttpClientsExtensions
@using CoinGardenWorld.HttpClientsExtensions.Infrastructure

@inject IHttpClientBase<VersionHttpClient, string> VersionHttpClient
@inject IHttpClientBase<VersionAuthorizedHttpClient, string> VersionAuthorizedHttpClient
@inject BlazorServerTokenProvider TokenProvider

<PageTitle>Internal Testing</PageTitle>

@if (_isAuthenticated)
{
    
    <CardAlert Color="success" Icon="bi-check-circle-fill">
        <Content>
           User is Authorized!
            <br>
            <a href="@_mobileApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                Mobile API Version: @_mobileApiVersion

            </a>
            <br />
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#accessToken" aria-expanded="false" aria-controls="accessToken">
               Access Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#refreshToken" aria-expanded="false" aria-controls="refreshToken">
               Refresh Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#xsrfToken" aria-expanded="false" aria-controls="xsrfToken">
               XsrfToken
           </button>
            <div class="collapse" id="accessToken">
               <div class="card card-body">
                   @TokenProvider.AccessToken
               </div>
           </div>
            <div class="collapse" id="refreshToken">
               <div class="card card-body">
                   @TokenProvider.RefreshToken
               </div>
           </div>
            <div class="collapse" id="xsrfToken">
               <div class="card card-body">
                   @TokenProvider.XsrfToken
               </div>
           </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="warning" Icon="bi-exclamation-triangle">
        <Content>
            Current User is not Authorized!
            <br>
            <a href="@_mobileApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                Mobile API Version: @_mobileApiVersion
            </a>
        </Content>
    </CardAlert>
    
}


@if (_mobileApiIsAvailable)
{
    if (_mobileIsApiAuthenticated)
    {
        <CardAlert Color="success" Icon="bi-check-circle-fill">
            <Content>
                Mobile API connection is Authorized!
                <br>
                <a href="@_mobileApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                    Mobile API Version: @_mobileApiVersion
                    </a>
            </Content>
        </CardAlert>
    }
    else
    {
        <CardAlert Color="warning" Icon="bi-exclamation-triangle">
            <Content>
                Mobile API connection is not Authorized!
                <br>
                <a href="@_mobileApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                    Mobile API Version: @_mobileApiVersion
                </a>
            </Content>
        </CardAlert>
    }
}
else
{
    <CardAlert Color="warning" Icon="bi-exclamation-triangle">
        <Content>
            Mobile API connection error!
            <br>
            <a href="@_mobileApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                Mobile API Version: @_mobileApiVersion
            </a>
        </Content>
    </CardAlert>

}
@code {
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask {get; set;}
    
    bool _isAuthenticated;

    private bool _mobileApiIsAvailable = false;
    private string _mobileApiSwaggerUrl = "#";
    private string _mobileApiVersion = "API is not available.";
    private bool _mobileIsApiAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // User Is Authenticated
        var authState = await authenticationStateTask;
        var user = authState.User;

        _isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        _mobileApiSwaggerUrl = VersionAuthorizedHttpClient.ApiUrl.Split("api")[0] + "swagger/index.html";

        // Test Mobile API without Authorization
        var apiVersionRequest = await VersionHttpClient.GetAsync("/api/version");
        if (apiVersionRequest.IsSuccessStatusCode)
        {
            _mobileApiIsAvailable = true;
            _mobileApiVersion = await apiVersionRequest.Content.ReadAsStringAsync();
        }

        // Test Mobile API with Authorization
        var authorizedResponse = await VersionAuthorizedHttpClient.GetAsync("/api/version/GetAuthorized");

        if (authorizedResponse.IsSuccessStatusCode)
        {
            _mobileIsApiAuthenticated = true;
        }
        else
        {
            _mobileIsApiAuthenticated = false;
        }
    }
}
