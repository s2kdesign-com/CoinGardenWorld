@page "/InternalTesting"

@attribute [Authorize]
@using CoinGardenWorld.HttpClientsExtensions.MobileApiClients
@using CoinGardenWorld.HttpClientsExtensions
@using CoinGardenWorld.HttpClientsExtensions.Infrastructure
@using CoinGardenWorld.HttpClientsExtensions.MetaverseSiteApiClients
@using CoinGardenWorld.HttpClientsExtensions.MobileApiSiteClients

@inject VersionHttpClient MobileApiVersionHttpClient
@inject VersionAuthorizedHttpClient MobileApiAuthorizedHttpClient

@inject MobileApiSiteAuthorizedAzureFunctionClient MobileApiSiteTestAuthorizedHttpClient
@inject MobileApiSiteAzureFunctionClient MobileApiSiteAzureFunctionClient


@inject MetaverseAuthorizedAzureFunctionClient MetaverseApiSiteTestAuthorizedHttpClient
@inject MetaverseAzureFunctionClient MetaverseApiSiteAzureFunctionClient


@inject BlazorServerTokenProvider TokenProvider

<PageTitle>Internal Testing</PageTitle>

<h2> Authentication Tests </h2>
<h3> User Tests</h3>
@if (_isAuthenticated)
{
    
    <CardAlert Color="success" Icon="bi-check-circle-fill">
        <Heading>            
            @_userName is Authorized! 
        </Heading>
        <Content>
            <br />
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#accessToken" aria-expanded="false" aria-controls="accessToken">
               Access Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#refreshToken" aria-expanded="false" aria-controls="refreshToken">
               Refresh Token
           </button>
           <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#xsrfToken" aria-expanded="false" aria-controls="xsrfToken">
               XsrfToken
           </button>
            <div class="collapse" id="accessToken">
               <div class="card card-body">
                   @TokenProvider.AccessToken
               </div>
           </div>
            <div class="collapse" id="refreshToken">
               <div class="card card-body">
                   @TokenProvider.RefreshToken
               </div>
           </div>
            <div class="collapse" id="xsrfToken">
               <div class="card card-body">
                   @TokenProvider.XsrfToken
               </div>
           </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="warning" Icon="bi-exclamation-triangle">
        <Content>
            Current User is not Authorized!
        </Content>
    </CardAlert>
    
}


<h3> API Tests</h3>

<ExternalApiTest HttpClientToTest="MobileApiVersionHttpClient" AuthorizedHttpClientToTest="MobileApiAuthorizedHttpClient" ApiName="Mobile API" SwaggerSuffix="swagger/index.html" AuthenticationEndpoint="api/version/GetAuthorized" VersionEndpoint="api/version" />



<ExternalApiTest HttpClientToTest="MobileApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MobileApiSiteTestAuthorizedHttpClient" ApiName="Mobile Site API" />

<ExternalApiTest HttpClientToTest="MetaverseApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MetaverseApiSiteTestAuthorizedHttpClient" ApiName="Metaverse Site API" />



<h3> SignalR Tests </h3>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask {get; set;}

    bool _isAuthenticated;
    string _userName;
    protected override async Task OnInitializedAsync()
    {
        // User Is Authenticated
        var authState = await authenticationStateTask;
        var user = authState.User;

        _isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if(_isAuthenticated)
        {
            _userName = user.Identity?.Name;
        }
    }


}
