@page "/InternalTesting"

@using CoinGardenWorld.HttpClientsExtensions.Infrastructure
@using CoinGardenWorld.DownstreamApiExtensions
@using CoinGardenWorld.DownstreamSignalRExtensions.HubClients
@using CoinGardenWorld.SignalRClientsExtensions.SignalR.HubClients

@inject DownstreamApiExtensions.MobileApiClients.MobileApiAuthorizedDownstreamApi MobileApiVersionDownstreamClient
@inject DownstreamApiExtensions.GardenBotMessageApiClients.VersionDownstreamApi GardenBotDownstreamClient


@inject ChatHubDownstreamClient chatHub
@inject NotificationsHubDownstreamClient notificationsHub

@inject BlazorServerTokens TokenProvider


<PageTitle>Testing</PageTitle>

<h2> Authentication Tests </h2>
<h3> User Tests</h3>
@if (_isAuthenticated)
{

    <CardAlert Color="success" Icon="bi-check-circle-fill">
        <Heading>
            @_userName is Authorized!
        </Heading>
        <Content>
            <br />
            <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#accessToken" aria-expanded="false" aria-controls="accessToken">
                Access Token
            </button>
            <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#refreshToken" aria-expanded="false" aria-controls="refreshToken">
                Refresh Token
            </button>
            <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#xsrfToken" aria-expanded="false" aria-controls="xsrfToken">
                XsrfToken
            </button>
            <div class="collapse mt-2" id="accessToken">
                <div class="card card-body">

                    <code>
                        @TokenProvider.AccessToken
                    </code>

                </div>
            </div>
            <div class="collapse mt-2" id="refreshToken">
                <div class="card card-body">

                    <code>
                        @TokenProvider.RefreshToken
                    </code>
                </div>
            </div>
            <div class="collapse mt-2" id="xsrfToken">
                <div class="card card-body">
                    <code>
                        @TokenProvider.XsrfToken
                    </code>
                </div>
            </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="warning" Icon="bi-exclamation-triangle">
        <Content>
            Current User is not Authorized!
        </Content>
    </CardAlert>

}


<h3> API Tests</h3>

@* <ExternalApiTest HttpClientToTest="MobileApiVersionHttpClient" AuthorizedHttpClientToTest="MobileApiAuthorizedHttpClient" ApiName="Mobile API" SwaggerSuffix="swagger/index.html" AuthenticationEndpoint="api/version/GetAuthorized" VersionEndpoint="api/version" />

<ExternalApiTest HttpClientToTest="GardenBotMessageApiAzureFunctionClient" AuthorizedHttpClientToTest="GardenBotMessageApiTestAuthorizedHttpClient" ApiName="GardenBOT Messaging API" AuthenticationEndpoint="version/GetAuthorized" VersionEndpoint="version" />

<ExternalApiTest HttpClientToTest="MobileApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MobileApiSiteTestAuthorizedHttpClient" ApiName="Mobile Site API" />

<ExternalApiTest HttpClientToTest="MetaverseApiSiteAzureFunctionClient" AuthorizedHttpClientToTest="MetaverseApiSiteTestAuthorizedHttpClient" ApiName="Metaverse Site API" />
 *@

<ExternalApiTest DownstreamApiClientToTest="MobileApiVersionDownstreamClient" ApiName="Mobile API" AuthenticationEndpoint="api/version/GetAuthorized" VersionEndpoint="api/version" />
<ExternalApiTest DownstreamApiClientToTest="GardenBotDownstreamClient" ApiName="GardenBOT Messaging API" AuthenticationEndpoint="version/GetAuthorized" VersionEndpoint="version" />


<h3> SignalR Tests </h3>

@if (chatHub.IsHubConnected)
{

    <CardAlert Color="success" Icon="bi-exclamation-triangle">
        <Content>
            <p>
                ChatHub is Authorized and Connected
            </p>
            <p>
                <button class="btn btn-warning">
                    Disconnect
                </button>
                <button class="btn btn-info" type="button" data-toggle="collapse" data-target="#chat" aria-expanded="false" aria-controls="collapseExample">
                    Start Chating
                </button>
            </p>
            <div class="collapse" id="chat">
                <div class="card card-body">
                    Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
                </div>
            </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="error" Icon="bi-exclamation-triangle">
        <Content>
            <p>
                ChatHub is not Authorized
            </p>
            <button class="btn btn-secondary">
                Try Connect
            </button>
        </Content>
    </CardAlert>

}

@if (notificationsHub.IsHubConnected)
{

    <CardAlert Color="success" Icon="bi-exclamation-triangle">
        <Content>
            <p>
                NotificationsHub is Authorized and Connected
            </p>
            <p>
                <button class="btn btn-warning">
                    Disconnect
                </button>
                <button class="btn btn-info" type="button" data-toggle="collapse" data-target="#chat" aria-expanded="false" aria-controls="collapseExample">
                    Send Notifications
                </button>
            </p>
            <div class="collapse" id="chat">
                <div class="card card-body">
                    Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
                </div>
            </div>
        </Content>
    </CardAlert>
}
else
{
    <CardAlert Color="error" Icon="bi-exclamation-triangle">
        <Content>
            <p>
                NotificationsHub is not Authorized
            </p>
            <button class="btn btn-secondary">
                Try Connect
            </button>
        </Content>
    </CardAlert>

}


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool _isAuthenticated;
    string _userName;
    protected override async Task OnInitializedAsync()
    {
        // User Is Authenticated
        var authState = await authenticationStateTask;
        var user = authState.User;

        _isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (_isAuthenticated)
        {
            _userName = user.Identity?.Name;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // We need to wait for the base because the hub will be null
        await base.OnAfterRenderAsync(firstRender);


        if (firstRender)
        {

            chatHub.NotifyStateChanged += () =>
            {
                InvokeAsync(StateHasChanged);
            };
            notificationsHub.NotifyStateChanged += () =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
    }

}
