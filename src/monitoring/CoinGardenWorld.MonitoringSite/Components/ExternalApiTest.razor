@using CoinGardenWorld.HttpClientsExtensions
@using CoinGardenWorld.DownstreamApiExtensions


@if (_mobileSiteApiIsAvailable)
{
    if (_mobileSiteApiAuthenticated)
    {
        <div class="alert alert-dismissible border alert-success shadow-bg shadow-bg-s">
            @if (ApiName != null)
            {
                <h4 class="alert-heading">
                    @ApiName - @_mobileSiteApiResponse
                </h4>

            }
            <div class="align-self-center" style="width: 100%">
                <p class="mb-0 font-500 font-14 ps-3 pe-4 line-height-s">

                    <a href="@_mobileSiteApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                        
                        Connection is Authorized!
                    </a>
                    <br />

                    <code>
                        @_mobileSiteApiAuthorizedResponse
                    </code>
                </p>
            </div>

        </div>
    }
    else
    {


        <div class="alert alert-dismissible border alert-warning shadow-bg shadow-bg-s">
            @if (ApiName != null)
            {
                <h4 class="alert-heading">
                    @ApiName - @_mobileSiteApiResponse
                </h4>

            }
            <div class="align-self-center" style="width: 100%">
                <p class="mb-0 font-500 font-14 ps-3 pe-4 line-height-s">

                    <a href="@_mobileSiteApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                        Connection is established but not Authorized!                        
                    </a>
                    <br />

                    <code>
                        Status Code: @_mobileSiteApiAuthorizedResponse
                    </code>
                </p>
            </div>

        </div>
    }

}
else
{




    <div class="alert alert-dismissible border alert-danger shadow-bg shadow-bg-s">
        @if (ApiName != null)
        {
            <h4 class="alert-heading">
                @ApiName
            </h4>

        }
        <div class="align-self-center" style="width: 100%">
            <p class="mb-0 font-500 font-14 ps-3 pe-4 line-height-s">

                <a href="@_mobileSiteApiSwaggerUrl" title="Mobile API Swagger" target="_blank">
                   Connection error!

                </a>
                <br>
                <code>
                    Status Code:  @_mobileSiteApiResponse
                </code>
            </p>
        </div>

    </div>
}
@code {

    private string _mobileSiteApiSwaggerUrl = "#";
    private bool _mobileSiteApiIsAvailable = false;
    private bool _mobileSiteApiAuthenticated = false;
    private string _mobileSiteApiResponse = "Loading";
    private string _mobileSiteApiAuthorizedResponse = "Loading";

    [Parameter]
    public IDownstreamApiBase<string> DownstreamApiClientToTest { get; set; }


    [Parameter]
    public string? ApiName { get; set; }

    [Parameter]
    public string SwaggerSuffix { get; set; } = "api/swagger/ui";


    [Parameter]
    public string VersionEndpoint { get; set; } = "api/version";

    [Parameter]
    public string AuthenticationEndpoint { get; set; } = "api/TestAuthenticatedEndpoint";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                //_mobileSiteApiSwaggerUrl = HttpClientToTest.BaseAddress + SwaggerSuffix;

                var apiVersionRequest = await DownstreamApiClientToTest.GetAsync(VersionEndpoint);
                if (apiVersionRequest.IsSuccessStatusCode)
                {
                    _mobileSiteApiIsAvailable = true;
                    _mobileSiteApiResponse = await apiVersionRequest.Content.ReadAsStringAsync();
                }
                else
                {
                    _mobileSiteApiIsAvailable = false;
                    _mobileSiteApiResponse = "" + apiVersionRequest.StatusCode + " " + await apiVersionRequest.Content.ReadAsStringAsync();

                }

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }

            try
            {
                // Test Azure Function API with Authorization
                var authorizedResponse = await DownstreamApiClientToTest.GetAsync(AuthenticationEndpoint);

                if (authorizedResponse.IsSuccessStatusCode)
                {
                    _mobileSiteApiIsAvailable = true;
                    _mobileSiteApiAuthenticated = true;
                    _mobileSiteApiAuthorizedResponse = await authorizedResponse.Content.ReadAsStringAsync();
                }
                else
                {
                    _mobileSiteApiAuthenticated = false;
                    _mobileSiteApiAuthorizedResponse = "" + authorizedResponse.StatusCode + " " + await authorizedResponse.Content.ReadAsStringAsync();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }

            StateHasChanged();
        }
    }

}
